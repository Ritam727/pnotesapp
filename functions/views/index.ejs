<!DOCTYPE html>
<html>
  <head>
    <!-- Meta tags and title -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Pnotes</title>

    <!-- Firebase SCripts, currently using app, auth and database for right now! -->
    <!-- update the version number as needed -->
    <script defer src="/__/firebase/7.14.4/firebase-app.js"></script>
    <!-- include only the Firebase features as you need -->
    <script defer src="/__/firebase/7.14.4/firebase-auth.js"></script>
    <script defer src="/__/firebase/7.14.4/firebase-database.js"></script>
    <!-- <script defer src="/__/firebase/7.14.4/firebase-messaging.js"></script> -->
    <!-- <script defer src="/__/firebase/7.14.4/firebase-storage.js"></script> -->
    <!-- initialize the SDK after all desired features are loaded -->
    <script defer src="/__/firebase/init.js"></script>
    <script src="https://cdn.jsdelivr.net/remarkable/1.7.1/remarkable.min.js"></script>

    <!-- Stylesheets -->
    <style media="screen">
      #load { color: rgba(0,0,0,0.4); text-align: center; font-size: 13px;}
      @media (max-width: 600px) {
        body, #message { margin-top: 0; background: white; box-shadow: none; }
      }
    </style>

    <link rel="stylesheet" href="/css/style.css">
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

  </head>
  <body>

    <!-- this line tells which firebase services are loaded or say using here! -->
    <!-- Check script below which tells about the services -->
    <p id="load">Firebase SDK Loading&hellip;</p>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // // ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥
        // // The Firebase SDK is initialized and available here!
        //
        // firebase.auth().onAuthStateChanged(user => { });
        // firebase.database().ref('/path/to/ref').on('value', snapshot => { });
        // firebase.messaging().requestPermission().then(() => { });
        // firebase.storage().ref('/path/to/ref').getDownloadURL().then(() => { });
        //
        // // ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥

        window.signInEmail = "";
        var md = new Remarkable();
        // console.log(md.render('# Remarkable rulezz!'));

        signInfunction=()=>{
            // Start the sign in Activity!
            console.log("Sign In NOw!");

            // Google sign in
            var provider = new firebase.auth.GoogleAuthProvider();
            firebase.auth().signInWithPopup(provider).then(function(result){
                // console.log(result);
                console.log("success, check now!");
            }).catch(function(err){
                console.log(err);
                console.log("Failed to do");
            });

            
        //     firebase.auth().signInWithRedirect(provider);

        //     firebase.auth().getRedirectResult()
        //         .then(function(result) {

        //             if (result.credential) {
        //                 // This gives you a Google Access Token. You can use it to access the Google API.
        //                 var token = result.credential.accessToken;
        //                 // ...
        //             }
        //             // The signed-in user info.
        //             var user = result.user;
        //             console.log("Sign In success!");
        //             console.log(user);
                    
        //         })
        //         .catch(function(error) {
        //             // Handle Errors here.
        //             console.log("Sign In Failed!");
        //             var errorCode = error.code;
        //             var errorMessage = error.message;
        //             // The email of the user's account used.
        //             var email = error.email;
        //             // The firebase.auth.AuthCredential type that was used.
        //             var credential = error.credential;
        //             // ...
        //         });

        }

        // This get the note list and also updates it
        firebase.auth().onAuthStateChanged(function(user) {
            if (user) {
                console.log("User is signed in!");
                var len = user.email.length;
                //console.log(len);
                window.signInEmail = user.email.toString().substr(0, len-10); //Removing the @gmail.com
                console.log(window.signInEmail);
                document.getElementById('guser').innerHTML = "Welcome "+window.signInEmail;
                document.getElementById('signInButton').style.display = "none";
                document.getElementById('signOutButton').style.display = "block";
                document.getElementById('addNoteButton').style.display = "block";

                // Now call the data extract for only once so as to get the list of datas
                firebase.database().ref(window.signInEmail).orderByChild('timestamp').on('value', function(snapshot){
                        
                    // Get the id of the list
                    var noteListId = document.getElementById('note-family');
                    
                    //Clear the list
                    noteListId.innerHTML ='';
                    
                    //console.log(snapshot);

                    var descNoteList = [];

                    snapshot.forEach(function(childSnapshot) {
                        var childKey = childSnapshot.key;
                        var childData = childSnapshot.val();
                        //console.log("childkey", childKey);
                        //console.log("childData", childData);
                        // ...
                        descNoteList.push({childKey: childKey, childData: childData});
                        
                    });

                    // Reverse the array
                    descNoteList.reverse();

                    descNoteList.forEach(function(childSnapshot){
                        var childKey = childSnapshot.childKey;
                        var childData = childSnapshot.childData;

                        //Setting the value
                        noteListId.innerHTML += '<div class="noterow" id="'+ childKey +'" >' 
                            + '<p class="notekey" >' + childKey + '</p>'
                            + '<!-- Expand Button -->'
                            //+ '<button class="btn btn-primary" id="expand-button" style="display: block;" >'

                            + '<div class="row" style="margin-left:0; margin-right:0" onclick=expandCollapseFun("' + childKey + '")> '
                                + '<i '
                                    + ' style="font-size:24px;" class="expand-toggler-icon fa btn">&#xf107;</i>'
                                + '<Button class="update-note-button btn btn-secondary" onclick=openUpdateNoteModal(\'' + childKey + '\') >' + 'Update' + '</Button>' 
                                + '<Button class="remove-note-button btn btn-danger" onclick=openDeleteNoteModal(\'' + childKey + '\') >' + 'Remove' + '</Button>' 
                                + '<h6 class="note-date">' + childData.date + '</h6>'
                                + '<h4 class="note-title">' + childData.title + '</h4>'
                            + '</div>'
                            + '<p class="note-description" style="display: none;">' + childData.description + '</p>'
                            + '<div class="note-descripiton-md" style="display: none;">' + md.render(childData.description) + '</div>'
                            + '</div>';
                    });
                });

                //list(family);

                // Here the firebase is correctly defined purely!
                //console.log(firebase.database.ServerValue.TIMESTAMP);

                addNotefunction=(title, description)=>{
                    //Start the add note function
                    console.log("Add Note");
                    
                    var options = {month: 'short', day: 'numeric' };
                    var today  = new Date();
                    // console.log(today.toLocaleDateString("en-US", options));

                    var newNote = {
                        title: title,
                        description: description,
                        date: today.toLocaleDateString("en-US", options),
                        timestamp: firebase.database.ServerValue.TIMESTAMP
                    }

                    // Get a key for a new Post.
                    var newPostKey = firebase.database().ref(window.signInEmail).push().key;

                    // Write the new post's data simultaneously in the posts list and the user's post list.
                    var updates = {};
                    updates[newPostKey] = newNote;

                    return firebase.database().ref(window.signInEmail).update(updates);
                }

                updateNotefunction=(noteId, title, description)=>{
                    
                    //Start the update note function
                    console.log("Update Note");
                    
                    var options = {month: 'short', day: 'numeric' };
                    var today  = new Date();
                    // console.log(today.toLocaleDateString("en-US", options));

                    var newNote = {
                        title: title,
                        description: description,
                        date: today.toLocaleDateString("en-US", options),
                        timestamp: firebase.database.ServerValue.TIMESTAMP
                    }

                    // Write the new post's data simultaneously in the posts list and the user's post list.
                    var updates = {};
                    updates[noteId] = newNote;

                    return firebase.database().ref(window.signInEmail).update(updates);
                }

                deleteNotefunction=(noteId)=>{
                    return firebase.database().ref(window.signInEmail).child(noteId).remove();
                }
                
            } else {
                console.log("NO user signed in!");
                window.signInEmail = "";
                document.getElementById('guser').innerHTML = "Welcome to Pnotes!";
                document.getElementById('signInButton').style.display = "block";
                document.getElementById('signOutButton').style.display = "none";
                document.getElementById('addNoteButton').style.display = "none";
                document.getElementById('note-family').innerHTML = '';
                // No user is signed in.
            }
        });


        // Tell which firebase apps are active
        try {
          let app = firebase.app();
          let features = ['auth', 'database', 'messaging', 'storage'].filter(feature => typeof app[feature] === 'function');
          document.getElementById('load').innerHTML = `Firebase SDK loaded with ${features.join(', ')}`;
        } catch (e) {
          console.error(e);
          document.getElementById('load').innerHTML = 'Error loading the Firebase SDK, check the console.';
        }
      });

      
    </script>

    <!-- Sign Out function -->
    <script>
        signOutfunction=()=>{
            //Start the user delete or sign out activity
            console.log("Sign Out User!");

            var user = firebase.auth().signOut();
        }
    </script>

    <!-- Script to open update note modal-->
    <script>
        function openUpdateNoteModal(noteRowId) {
            // console.log(noteRowId);
            var noteRowSelected = document.getElementById(noteRowId);
            // console.log(noteRowSelected);

            // Now update after taking values from this
            var noteDescr = noteRowSelected.getElementsByClassName('note-description')[0].innerHTML;
            var noteTitle = noteRowSelected.getElementsByClassName('note-title')[0].innerHTML;
            console.log(noteDescr);
            // console.log(noteTitle);

            // Get the modal
            var modal = document.getElementById("myModal");

            // Get the <span> element that closes the modal
            var span = document.getElementsByClassName("close")[0];
            
            var formNoteTitle = document.getElementById('add-title');
            var formNoteDescr = document.getElementById('add-description');
            formNoteTitle.value = noteTitle;
            formNoteDescr.innerHTML = noteDescr;
            // When the user clicks the button, open the modal 
            modal.style.display = "block";
            // Certainly some times an unexpected problem arise if value is not updated
            formNoteDescr.value = noteDescr;
            
            // When the user clicks on <span> (x), close the modal
            span.onclick = function() {
                modal.style.display = "none";
            }

            // Now for the submit button
            var submitUpdateNote = document.getElementById('add-note-submit-button');
            submitUpdateNote.innerHTML = 'Update Note';

             submitUpdateNote.onclick = function(){
                
            var addNoteTitle = document.getElementById('add-title').value;
                var addNoteDescription = document.getElementById('add-description').value;
                //console.log(addNoteTitle);
                //console.log(addNoteDescription);
                if(addNoteTitle){
                    // Note title not empty
                    // Now do the thing which you want to do call addNotefunction
                    updateNotefunction(noteRowId, addNoteTitle, addNoteDescription);
                    modal.style.display = "none";

                } else{
                    //Empty
                    console.log("Empty Note Title");
                    modal.style.display = "none";
                }
            }
            


        }
    </script>    

    <!-- Main content -->
    <div class="container">

        <div id="message">
            <span class="heading" id="guser"> Weclome to Pnotes!</span>
            <button onclick="signInfunction()" class='btn btn-success pull-right' id="signInButton">Google Sign In!</button>
            <button onclick="signOutfunction()" class='btn btn-danger pull-right' id="signOutButton">Sign out</button>
            <button class='btn btn-primary pull-right' id="addNoteButton" onclick=openAddNoteModal()>Add Note</button>

            <div id="note-family">
            </div>
        </div>

        <!-- The Add and delete Modal -->
        <div id="myModal" class="modal">

            <!-- Modal content -->
            <div class="modal-content">

                <!-- Heading and close button -->
                <span class="close" style="padding-top: 4px; font-size: 30px;">&times;</span>
                <!-- Submit Button --> <!-- Changed it to have it only for function -->
                <div style="padding-bottom: 50px">
                    <h3 style="margin-top: 5px !important; float: left;">Add Note</h3>
                    <button id="add-note-submit-button" style="float: right; margin-right: 16px;">Add Note</button>
                </div>
                

                <!-- Function to add a note-->

                    <!-- Title -->
                    <div class="form-group">
                        <input id="add-title" type="text" class="form-control input-contrast input-block" placeholder="Note Title">
                    </div>

                    <!-- Description -->
                    <div class="form-group">
                        <textarea id="add-description" type="text" class="form-control input-contrast input-block" placeholder="Add Note Description here"></textarea>
                    </div>
                
            </div>
        
        </div>

        <!-- The delete Modal -->
        <div id="deleteModal" class="modal" style="padding-top: 200px;">

            <!-- Modal content -->
            <div class="modal-content" style="max-width: 400px;">
                <!-- Heading and close button -->
                <span class="close">&times;</span>
                <h3 style="margin-top: 5px !important;">Delete Note Warning</h3>
                <p>Are You Sure You want to Delete this Note?<p>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary cancel">Close</button>
                    <button type="button" class="btn btn-primary confirm-delete">Delete Note</button>
                  </div>
            </div>

        </div>

    </div>

    <!-- Script for all add note form and all -->
    <script>
        function openAddNoteModal() {

            // Get the modal
            var modal = document.getElementById("myModal");
            modal.style.display = "block";
            
            // Get the <span> element that closes the modal
            var span = document.getElementsByClassName("close")[0];

            // When the user clicks on <span> (x), close the modal
            span.onclick = function() {
                modal.style.display = "none";
            }

            // empty the textboxes
            var formNoteTitle = document.getElementById('add-title');
            var formNoteDescr = document.getElementById('add-description');
            formNoteDescr.innerHTML = '';
            formNoteTitle.value = '';
            formNoteDescr.value = '';

            // Now for the submit button
            var submitAddNote = document.getElementById('add-note-submit-button');
            submitAddNote.innerHTML = 'Add Note';

            submitAddNote.onclick = function () {

                var addNoteTitle = document.getElementById('add-title').value;
                var addNoteDescription = document.getElementById('add-description').value;
                //console.log(addNoteTitle);
                //console.log(addNoteDescription);
                if (addNoteTitle) {
                    // Note title not empty
                    // Now do the thing which you want to do call addNotefunction
                    addNotefunction(addNoteTitle, addNoteDescription);

                    formNoteTitle.value = '';
                    formNoteDescr.innerHTML = '';

                    modal.style.display = "none";

                } else {
                    //Empty
                    console.log("Empty Note Title");
                    modal.style.display = "none";
                }
            }

        }
        
    </script>
        
    <script>
        function openDeleteNoteModal(noteRowId){
            // Get the modal
            var modal = document.getElementById("deleteModal");
            modal.style.display = "block";

            // Get the <span> element that closes the modal
            var span = modal.getElementsByClassName("close")[0];
            
            // When the user clicks on <span> (x), close the modal
            span.onclick = function() {
                modal.style.display = "none";
            }

            var cancel = modal.getElementsByClassName("cancel")[0];
            cancel.onclick = function() {
                modal.style.display = "none";
            }

            confirmDelete = modal.getElementsByClassName("confirm-delete")[0];
            confirmDelete.onclick = function() {
                deleteNotefunction(noteRowId);
                modal.style.display ="none";
            }
        
        }
    </script>


    <!-- script for expand and collapse -->
    <script>
        function expandCollapseFun(divId) {
            try {
                var clickedDiv = document.getElementById(divId);
                var descMd = clickedDiv.getElementsByClassName('note-descripiton-md')[0];
                console.log(descMd);

                var expBtnStyle = clickedDiv.getElementsByTagName('i')[0];
                if(descMd.style.display === 'none'){
                    // This is collapsed
                    // Expand this
                    descMd.style.display = "block";
                    expBtnStyle.innerHTML = "&#xf106;";
                } else {
                    expBtnStyle.innerHTML = "&#xf107;"
                    descMd.style.display = "none";
                }
            } catch(e) {
                console.log(e);
                console.log("Ignore this message, this comes when remove is done")
            }
            
        }
    </script>

  </body>
</html>
